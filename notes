install react-router-dom

export browserrouter and route;
create routes
modify webpack config. Add historyApiFallback 


REDUX-
Install redux
Why redux?
1. Where do i store my app state in a acomplex react app
2. How do i create components that are actually reusable?

redux is a state container like our class based components
Create a redux store
All the components can chnage/read from the store
Using actions-
Object sent to the store
 all the actions need a type.

--------------------------------------------
 import {createStore} from 'redux';

const store= createStore ((state = {count:0},action) => {

    //access action.type
    return state;
});

 store.dispatch({
     type: 'someaction'
 })

store.subscribe is a function that gets called whenever the state changes.

Action generators -
a function that return action objects. 
Reducers-
 Are pure functions. Outputs are only determined by the inputs given;
 var a= 10;
 const add = (b) => {
     return a+b;
 } // This is not a pure function
 const add1 = (b) => {
     return b+b;
 }// this is a pure function
 
 combineReducers will create multiple functions that define how our redux application changes.

 





----------OFF TOPIC---------------------------------
ES6 Object destructuring
------------------------

person{
    name:"abc",
    location:{
        city,
        temp
    }
}
const {name} = person;
const {city,temp: temperature} = person.location
creating alias using name: new_name
setting up defaults - name
const {name: firstname = 'Anonymous'}

ES6 Array destructuring
-----------------------
const [street, city, state, zip]= address


ES6 object spread install babel plugin


EXPLANATION OF REDUX
----------------------
-----------------------
We have our store.



const store = createStore(
  combineReducers({
    expenses: expensesReducer,
    filters: filtersReducer
  })
);


When we dispatch to the store it is sent as an object with our data as an action.

const expenseOne = store.dispatch(addExpense({ description: "Rent", amount: 100 }));


Dispatch sends our data from addExpense to all reducers (including the user data we added which will propagate our description with Rent and amount with 100).



const addExpense = (
  { 
    description = "", 
    note = "", 
    amount = 0, 
    createdAt = 0
  } = {}
) => ({
  type: "ADD_EXPENSE",
  expense: {
    id: uuid(),
    description,
    note,
    amount,
    createdAt
  }
});


Our reducers get their state and look for the action.type to match up with the dispatch argument passed in. It finds it, which in this case is ADD_EXPENSE and then it returns the case we've set up.

const expensesReducerDefaultState = [];
 
const expensesReducer = (state = expensesReducerDefaultState, action) => {
  switch(action.type){
    case "ADD_EXPENSE":
      return [...state, action.expense];
    case "REMOVE_EXPENSE":
      return state.filter(({id}) => {
        return id !== action.id
      
      });
    default:
    return state;
  }
};


We now have our new state.


//Higher Order components-
A component that renders another component


Install react-redux

PROVIDER
Provider is generally used once to connect with the store

CONNECT
connect (() => {
// about what we want to connect
//function lets us determines what information from the store the component needs to access
//return an object which can used as props

})
call connect with a component

for dates- use airbnb react-dates and moment 
and react-addons-shallow-compare



Redux dev tools
add this line based on github description
 window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()

 Install and set up JEST
 




